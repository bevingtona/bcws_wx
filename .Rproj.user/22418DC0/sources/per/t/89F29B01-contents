library(RcppRoll)
library(tmap)
library(data.table)
library(lubridate)
library(sf)
library(dplyr)
library(rbokeh)
library(leaflet)
source("prep.R")

ui <- fluidPage(

    titlePanel("BCWS WX DATA (Draft)"),

    sidebarLayout(
      
      sidebarPanel(width = 3,
          selectInput(
            "siteID",
            label="ID",
            choices=ids,
            selected = "SUMMIT ID:11",
            multiple = TRUE), 
          selectInput(
            "variableID",
            label="VARIABLE",
            choices=vars,
            selected = vars[1]),
          selectInput(
            "aggregateID",
            label="ROLLING WINDOW",
            choices=c("1 hour","12 hours","24 hours","2 days", "1 week"),
            selected = "24 hours"),
          selectInput(
            "statisticID",
            label="ROLLING STATISTIC",
            choices=c("mean","max","min","sum"),
            selected = "sum"), 
          dateRangeInput(
            "dates", 
            label = "DATE RANGE", 
            start = as.Date(now())-10, 
            end = as.Date(now())),
          leafletOutput("mapStns")
        ),

        mainPanel(width = 9,
                  rbokehOutput("distPlot"),
                  rbokehOutput("rollingPlot"),
                  downloadButton("downloadData", "Download Hourly CSV")
                  )))

server <- function(input, output, session) {

    output$distPlot <- renderRbokeh({
      
      df_sub <- df %>%
        filter(STATION_ID %in% input$siteID) %>%
        mutate(STATION_ID = as.character(STATION_ID)) %>%
        filter(date >= input$dates[1]) %>%
        filter(date <= input$dates[2]) %>%
        rename(var = input$variableID) %>%
        select(STATION_ID, datetime, var)
      
      figure(title = " Hourly Data", width = 1600, height = 600,
             legend_location = "top_left",
             tools = c("pan", "wheel_zoom", "box_zoom", "reset", "save", "resize")) %>%
        ly_lines(datetime, var, data = df_sub, group = STATION_ID) %>%
        ly_points(datetime, var, data = df_sub,
                  hover = list(datetime, STATION_ID, var), color = STATION_ID) %>%
        x_axis(label = "") %>%
        y_axis(paste(input$variableID, "Hourly"))
    })

    output$rollingPlot <- renderRbokeh({
      
      hours <- tibble(id = c("1 hour", "12 hours", "24 hours", "2 days", "1 week"),  
                      hours = c(1,12,24,48,168)) %>% 
        filter(id == input$aggregateID) %>% 
        select(hours) %>% pull()
      
      df_sub <- df %>%
        filter(STATION_ID %in% input$siteID) %>%
        mutate(STATION_ID = as.character(STATION_ID)) %>%
        filter(date >= input$dates[1]) %>%
        filter(date <= input$dates[2]) %>%
        rename(var = input$variableID) %>%
        select(STATION_ID, datetime, var)
  
      df_sub_adj <- df_sub %>%
            arrange(datetime) %>%
            group_by(STATION_ID) %>%
            mutate(
              mean = roll_mean(var, hours, align = "right", fill = NA, na.rm = T),
              min = roll_min(var, hours, align = "right", fill = NA, na.rm = T),
              max = roll_max(var, hours, align = "right", fill = NA, na.rm = T),
              sum = roll_sum(var, hours, align = "right", fill = NA, na.rm = T)) %>%
            rename(myvar = input$statisticID) %>%
            select(STATION_ID, datetime, myvar)
      
        figure(title = "Rolling Statistics", width = 1600,height = 600,
               legend_location = "top_left",
               tools = c("pan", "wheel_zoom", "box_zoom", "reset", "save", "resize")) %>%
          ly_lines(datetime, myvar, data = df_sub_adj, group = STATION_ID) %>%
          ly_points(datetime, myvar, data = df_sub_adj,
                    hover = list(datetime, STATION_ID, myvar), color = STATION_ID) %>%
          x_axis(label = "") %>%
          y_axis(paste(input$variableID, "Rolling", input$statisticID))

      })

  # STN MAP
    output$mapStns <- renderLeaflet({
      stn_map <- stn %>%
        filter(STATION_ID %in% ids) %>%
        mutate(group = case_when(STATION_ID %in% input$siteID ~ "selected", TRUE ~ ""))

      tmap_leaflet(
      tm_shape(select(stn_map, c("STATION_ID","group")),
               bbox = stn_map %>% filter(group == "selected") %>%
                 st_buffer(50000) %>% st_bbox()) +
        tm_symbols(col = "group",
                   palette = c("grey60", "red"),
                   group = "group", size = 1.5))
    })
    
  output$downloadData <- downloadHandler(

      filename = function() {
        gsub("ID:","",gsub("-","",paste(input$siteID, "_",
              input$variableID, "_",
              input$dates[1], "_",
              input$dates[2],
              ".csv", sep = "")))
      },
      content = function(file) {
        write.csv(df %>%
                    filter(STATION_ID %in% input$siteID) %>%
                    mutate(STATION_ID = as.character(STATION_ID)) %>%
                    filter(date >= input$dates[1]) %>%
                    filter(date <= input$dates[2]) %>%
                    select(STATION_ID, datetime, input$variableID),
                  file, row.names = FALSE)
      }
    )
  
  
  # observe({
  #   
  #   ## the sgmap2 needs to match the name of the map you're outputting above
  #   event <- input$mapStns_shape_click
  #   event$id = gsub("."," ",gsub("ID.","ID:",event$id))
  #   print(event)
  #   updateSelectInput(session, inputId = "siteID", selected = event$id)
  #   
  # })
    
      
}

shinyApp(ui = ui, server = server)